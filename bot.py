import asyncio
import json
import logging
import os
import time
from pathlib import Path
from typing import List, Dict, Any, Set

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ChatType, ParseMode
from aiogram.exceptions import TelegramRetryAfter, TelegramNetworkError, TelegramForbiddenError
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMINS: list[int] = [1189419672, 1602393068]
SOURCE_CHAT_IDS: Set[int] = {
    -1001433669620,  # @namangantoshkent24
    -1001327239978,  # @Namangantoshkent26
    -1001737181397,  # @Namangan_toshkent_taksi_29
}

DATA_FILE = Path("data.json")

# --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
logging.basicConfig(
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("bot")

if not BOT_TOKEN:
    log.critical("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit()
if not ADMINS:
    log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMINS –Ω–µ –∑–∞–¥–∞–Ω–∞. –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
if not SOURCE_CHAT_IDS:
    log.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è SOURCE_CHATS –Ω–µ –∑–∞–¥–∞–Ω–∞. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")


# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò (JSON) ---
class DataManager:
    def __init__(self, file_path: Path):
        self.file_path = file_path
        self.data = self._load()

    def _load(self) -> Dict[str, Any]:
        try:
            if not self.file_path.exists():
                self.file_path.parent.mkdir(exist_ok=True)
                log.warning("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π.", self.file_path)
                # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                default_data = {"recipients": [], "keywords": [], "ignored_users": [], "delete_source_message": False}
                self.file_path.write_text(json.dumps(default_data, indent=2, ensure_ascii=False))
                return default_data

            loaded_data = json.loads(self.file_path.read_text(encoding="utf-8"))
            # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π
            for key, default_value in [
                ("recipients", []), 
                ("keywords", []), 
                ("ignored_users", []), 
                ("delete_source_message", False)
            ]:
                if key not in loaded_data:
                    loaded_data[key] = default_value
            return loaded_data
        except (json.JSONDecodeError, IOError) as e:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å %s. –ò—Å–ø–æ–ª—å–∑—É—é –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏. –û—à–∏–±–∫–∞: %s", self.file_path, e)
            return {"recipients": [], "keywords": [], "ignored_users": [], "delete_source_message": False}

    def _save(self) -> None:
        try:
            self.file_path.write_text(json.dumps(self.data, indent=2, ensure_ascii=False))
        except IOError as e:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ %s. –û—à–∏–±–∫–∞: %s", self.file_path, e)

    @property
    def recipients(self) -> List[int]: return self.data.get("recipients", [])
    @property
    def keywords(self) -> List[str]: return self.data.get("keywords", [])
    @property
    def ignored_users(self) -> List[int]: return self.data.get("ignored_users", [])
    # –ù–û–í–û–ï: –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    @property
    def delete_source(self) -> bool: return self.data.get("delete_source_message", False)

    def add_item(self, list_name: str, item: Any) -> bool:
        if item not in self.data[list_name]:
            self.data[list_name].append(item)
            self._save()
            log.info("–í —Å–ø–∏—Å–æ–∫ '%s' –¥–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: %s", list_name, item)
            return True
        return False

    def remove_item(self, list_name: str, item: Any) -> bool:
        if item in self.data[list_name]:
            self.data[list_name].remove(item)
            self._save()
            log.info("–ò–∑ —Å–ø–∏—Å–∫–∞ '%s' —É–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: %s", list_name, item)
            return True
        return False
    
    # –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
    def toggle_delete_source(self) -> bool:
        current_state = self.delete_source
        self.data["delete_source_message"] = not current_state
        self._save()
        log.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ 'delete_source_message' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ %s", not current_state)
        return not current_state


db = DataManager(DATA_FILE)
router = Router()


# --- –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ê–î–ú–ò–ù–ê ---
def admin_only(handler):
    async def wrapper(message: Message, *args, **kwargs):
        if message.from_user.id not in ADMINS:
            return await message.reply("‚õîÔ∏è –°–∏–∑–¥–∞ –µ—Ç–∞—Ä–ª–∏ “≥—É“õ—É“õ –π—û“õ.")
        return await handler(message, *args, **kwargs)

    return wrapper


# --- –û–°–ù–û–í–ù–´–ï –•–≠–ù–î–õ–ï–†–´ ---
@router.message(Command("start"), F.chat.type == ChatType.PRIVATE)
async def cmd_start(message: Message) -> None:
    text = f"üëã –ê—Å—Å–∞–ª–æ–º—É –∞–ª–µ–π–∫—É–º!\n–°–∏–∑–Ω–∏–Ω–≥ ID: <code>{message.from_user.id}</code>"
    if message.from_user.id in ADMINS:
        # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ø—Ä–∞–≤–∫—É
        text += "\n\n–°–∏–∑ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∏—Å–∏–∑. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" \
                "<b>‚öôÔ∏è –û–±—â–∏–µ:</b>\n" \
                "/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n" \
                "/toggle_delete - –≤–∫–ª/–≤—ã–∫–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞\n\n" \
                "<b>üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b>\n" \
                "/add <code>user_id</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n" \
                "/remove <code>user_id</code> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n" \
                "/list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π\n\n" \
                "<b>üö´ –ë–ª–æ–∫-—Å–ª–æ–≤–∞:</b>\n" \
                "/add_word <code>—Å–ª–æ–≤–æ</code> - –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫-—Å–ª–æ–≤–æ\n" \
                "/remove_word <code>—Å–ª–æ–≤–æ</code> - —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫-—Å–ª–æ–≤–æ\n" \
                "/list_words - —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫-—Å–ª–æ–≤\n\n" \
                "<b>IGNORE –ò–≥–Ω–æ—Ä-–ª–∏—Å—Ç:</b>\n" \
                "/add_ignore <code>user_id</code> - –¥–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞ –≤ –∏–≥–Ω–æ—Ä\n" \
                "/remove_ignore <code>user_id</code> - —É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–∞ –∏–∑ –∏–≥–Ω–æ—Ä–∞\n" \
                "/list_ignored - —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö"
    await message.answer(text)

# –ò–ó–ú–ï–ù–ï–ù–û: –•—ç–Ω–¥–ª–µ—Ä `relay_message` —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
@router.message(F.chat.id.in_(SOURCE_CHAT_IDS), F.text)
async def relay_message(message: Message, bot: Bot) -> None:
    if message.from_user and message.from_user.id in db.ignored_users:
        log.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –ø—Ä–æ–ø—É—â–µ–Ω–æ.", message.from_user.id)
        return

    txt = (message.text or "").lower()
    if any(kw in txt for kw in db.keywords):
        log.info("–°–æ–æ–±—â–µ–Ω–∏–µ %d –∏–∑ —á–∞—Ç–∞ %d –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –±–ª–æ–∫-—Å–ª–æ–≤–∞.", message.message_id, message.chat.id)
        return

    for user_id in db.recipients:
        try:
            await bot.forward_message(
                chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id,
            )
            info_text = build_info_text(message)
            await bot.send_message(
                chat_id=user_id, text=info_text, disable_web_page_preview=True,
            )
        # –ù–û–í–û–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        except TelegramForbiddenError:
            log.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è—é –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.", user_id)
            db.remove_item("recipients", user_id)
        except Exception as e:
            log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é %s. –û—à–∏–±–∫–∞: %s", user_id, e)
    
    # –ù–û–í–û–ï: –ë–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if db.delete_source:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            log.info("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ %d –∏–∑ —á–∞—Ç–∞ %d —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", message.message_id, message.chat.id)
        except Exception as e:
            log.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %d –∏–∑ —á–∞—Ç–∞ %d. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –û—à–∏–±–∫–∞: %s",
                message.message_id, message.chat.id, e
            )


def build_info_text(message: Message) -> str:
    user = message.from_user
    full_name = (user.full_name or "‚Äî").replace("<", "&lt;").replace(">", "&gt;")
    username = f"@{user.username}" if user.username else "–ô–æ“õ"
    link = f"https://t.me/c/{abs(message.chat.id) - 1000000000000}/{message.message_id}"
    return (f"‚úÖ –ú–∏–∂–æ–∑ “≥–∞“õ–∏–¥–∞ –º–∞—ä–ª—É–º–æ—Ç:\n"
            f"üë§ –ò—Å–º ‚Äî <a href=\"tg://user?id={user.id}\">{full_name}</a> (ID: <code>{user.id}</code>)\n"
            f"üí¨ Username ‚Äî {username}\n\n"
            f"üîó <a href='{link}'>–ê—Å–æ—Å–∏–π —Ö–∞–±–∞—Ä–≥–∞ —û—Ç–∏—à</a>")


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ---
# –ù–û–í–û–ï: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.message(Command("toggle_delete"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_toggle_delete(message: Message):
    new_state = db.toggle_delete_source()
    status_text = "‚úÖ –í–ö–õ–Æ–ß–ï–ù–û" if new_state else "‚ùå –í–´–ö–õ–Æ–ß–ï–ù–û"
    await message.reply(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å: <b>{status_text}</b>.")

# –ù–û–í–û–ï: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
@router.message(Command("status"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_status(message: Message):
    delete_status = "‚úÖ –í–ö–õ–Æ–ß–ï–ù–û" if db.delete_source else "‚ùå –í–´–ö–õ–Æ–ß–ï–ù–û"
    
    recipients_list = "\n".join(f"  ‚Ä¢ <code>{uid}</code>" for uid in db.recipients) or "  –†—û–π—Ö–∞—Ç –±—û—à."
    keywords_list = "\n".join(f"  ‚Ä¢ <code>{word}</code>" for word in db.keywords) or "  –†—û–π—Ö–∞—Ç –±—û—à."
    ignored_list = "\n".join(f"  ‚Ä¢ <code>{uid}</code>" for uid in db.ignored_users) or "  –†—û–π—Ö–∞—Ç –±—û—à."

    text = (
        "<b>üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n\n"
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {delete_status}\n\n"
        f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b>\n{recipients_list}\n\n"
        f"üö´ <b>–ë–ª–æ–∫-—Å–ª–æ–≤–∞:</b>\n{keywords_list}\n\n"
        f"IGNORE <b>–ò–≥–Ω–æ—Ä-–ª–∏—Å—Ç:</b>\n{ignored_list}"
    )
    await message.answer(text)


async def manage_id_list(message: Message, command: str, list_name: str, add_msg: str, remove_msg: str, list_title: str):
    parts = message.text.split(maxsplit=1)
    action = command.split('_')[0]

    if action == "list":
        item_list = db.data.get(list_name, [])
        if not item_list: return await message.reply("–†—û–π—Ö–∞—Ç –±—û—à.")
        rows = "\n".join(f"<code>{item}</code>" for item in item_list)
        return await message.reply(f"{list_title}:\n{rows}")

    if len(parts) != 2 or not parts[1].lstrip("-").isdigit():
        return await message.reply(f"–§–æ–π–¥–∞–ª–∞–Ω–∏—à: /{command} [user_id]")

    uid = int(parts[1])
    if action == "add":
        if db.add_item(list_name, uid):
            await message.reply(f"‚úÖ {add_msg}: <code>{uid}</code>")
        else:
            await message.reply("–ë—É ID —Ä—û–π—Ö–∞—Ç–¥–∞ –∞–ª–ª–∞“õ–∞—á–æ–Ω –º–∞–≤–∂—É–¥.")
    elif action == "remove":
        if db.remove_item(list_name, uid):
            await message.reply(f"üóë {remove_msg}: <code>{uid}</code>")
        else:
            await message.reply("–ë—É ID —Ä—û–π—Ö–∞—Ç–¥–∞ –π—û“õ.")


@router.message(Command("add"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_add(message: Message, **kwargs): await manage_id_list(message, "add", "recipients", "“ö—û—à–∏–ª–¥–∏", "", "")

@router.message(Command("remove"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_remove(message: Message, **kwargs): await manage_id_list(message, "remove", "recipients", "", "–é—á–∏—Ä–∏–ª–¥–∏", "")

@router.message(Command("list"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_list(message: Message, **kwargs): await manage_id_list(message, "list", "recipients", "", "", "–ñ–æ—Ä–∏–π “õ–∞–±—É–ª “õ–∏–ª—É–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

@router.message(Command("add_ignore"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_add_ignore(message: Message, **kwargs):
    await manage_id_list(message, "add_ignore", "ignored_users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç", "", "")

@router.message(Command("remove_ignore"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_remove_ignore(message: Message, **kwargs):
    await manage_id_list(message, "remove_ignore", "ignored_users", "", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞", "")

@router.message(Command("list_ignored"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_list_ignored(message: Message, **kwargs):
    await manage_id_list(message, "list", "ignored_users", "", "", "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

@router.message(Command("add_word", "remove_word", "list_words"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def manage_keywords(message: Message, **kwargs):
    command, *args = message.text.split(maxsplit=1)
    command = command.lstrip('/')

    if command == "list_words":
        if not db.keywords: return await message.reply("–ë–ª–æ–∫-—Å—û–∑–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ –±—û—à.")
        rows = "\n".join(f"‚Ä¢ <code>{word}</code>" for word in db.keywords)
        return await message.reply(f"–ñ–æ—Ä–∏–π –±–ª–æ–∫-—Å—û–∑–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n{rows}")

    if not args: return await message.reply(f"–§–æ–π–¥–∞–ª–∞–Ω–∏—à: /{command} [—Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞]")

    word = args[0].strip().lower()
    if command == "add_word":
        if db.add_item("keywords", word):
            await message.reply(f"‚úÖ –ë–ª–æ–∫-—Å–ª–æ–≤–æ “õ—û—à–∏–ª–¥–∏: <code>{word}</code>")
        else:
            await message.reply("–ë—É —Å—û–∑ —Ä—û–π—Ö–∞—Ç–¥–∞ –∞–ª–ª–∞“õ–∞—á–æ–Ω –º–∞–≤–∂—É–¥.")
    elif command == "remove_word":
        if db.remove_item("keywords", word):
            await message.reply(f"üóë –ë–ª–æ–∫-—Å–ª–æ–≤–æ —û—á–∏—Ä–∏–ª–¥–∏: <code>{word}</code>")
        else:
            await message.reply("–ë—É —Å—û–∑ —Ä—û–π—Ö–∞—Ç–¥–∞ –π—û“õ.")


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---1
async def main() -> None:
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()

    dp.include_router(router)

    # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞, —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª data.json, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤—ã–π –∫–ª—é—á
    # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    # –≠—Ç–æ –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
    try:
        with open(DATA_FILE, 'r') as f:
            data = json.load(f)
        if 'delete_source_message' not in data:
            log.warning("–ö–ª—é—á 'delete_source_message' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ data.json. –§–∞–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω.")
            os.remove(DATA_FILE)
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º db, —á—Ç–æ–±—ã –æ–Ω —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            global db
            db = DataManager(DATA_FILE)
    except (FileNotFoundError, json.JSONDecodeError):
        pass # –§–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –ø—É—Å—Ç, DataManager —Å–ø—Ä–∞–≤–∏—Ç—Å—è

    while True:
        try:
            log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

        except (KeyboardInterrupt, SystemExit):
            log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            break

        except TelegramRetryAfter as e:
            log.warning("Flood-wait %s —Å–µ–∫—É–Ω–¥.", e.retry_after)
            await asyncio.sleep(e.retry_after)

        except Exception:
            log.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(15)


if __name__ == "__main__":
    asyncio.run(main())
