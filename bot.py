@router.message(Command("add"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_add(message: Message, **kwargs): await manage_id_list(message, "add", "recipients", "“ö—û—à–∏–ª–¥–∏", "", "")
@router.message(Command("remove"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_remove(message: Message, **kwargs): await manage_id_list(message, "remove", "recipients", "", "–é—á–∏—Ä–∏–ª–¥–∏", "")
@router.message(Command("list"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_list(message: Message, **kwargs): await manage_id_list(message, "list", "recipients", "", "", "–ñ–æ—Ä–∏–π “õ–∞–±—É–ª “õ–∏–ª—É–≤—á–∏–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏")

@router.message(Command("add_ignore"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_add_ignore(message: Message, **kwargs): await manage_id_list(message, "add_ignore", "ignored_users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç", "", "")
@router.message(Command("remove_ignore"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_remove_ignore(message: Message, **kwargs): await manage_id_list(message, "remove_ignore", "ignored_users", "", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–∞", "")
@router.message(Command("list_ignored"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def cmd_list_ignored(message: Message, **kwargs): await manage_id_list(message, "list", "ignored_users", "", "", "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

@router.message(Command("add_word", "remove_word", "list_words"), F.chat.type == ChatType.PRIVATE)
@admin_only
async def manage_keywords(message: Message, **kwargs):
    command, *args = message.text.split(maxsplit=1)
    command = command.lstrip('/')

    if command == "list_words":
        if not db.keywords: return await message.reply("–ë–ª–æ–∫-—Å—û–∑–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏ –±—û—à.")
        rows = "\n".join(f"‚Ä¢ <code>{word}</code>" for word in db.keywords)
        return await message.reply(f"–ñ–æ—Ä–∏–π –±–ª–æ–∫-—Å—û–∑–ª–∞—Ä —Ä—û–π—Ö–∞—Ç–∏:\n{rows}")

    if not args: return await message.reply(f"–§–æ–π–¥–∞–ª–∞–Ω–∏—à: /{command} [—Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞]")
    
    word = args[0].strip().lower()
    if command == "add_word":
        if db.add_item("keywords", word): await message.reply(f"‚úÖ –ë–ª–æ–∫-—Å–ª–æ–≤–æ “õ—û—à–∏–ª–¥–∏: <code>{word}</code>")
        else: await message.reply("–ë—É —Å—û–∑ —Ä—û–π—Ö–∞—Ç–¥–∞ –∞–ª–ª–∞“õ–∞—á–æ–Ω –º–∞–≤–∂—É–¥.")
    elif command == "remove_word":
        if db.remove_item("keywords", word): await message.reply(f"üóë –ë–ª–æ–∫-—Å–ª–æ–≤–æ —û—á–∏—Ä–∏–ª–¥–∏: <code>{word}</code>")
        else: await message.reply("–ë—É —Å—û–∑ —Ä—û–π—Ö–∞—Ç–¥–∞ –π—û“õ.")

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main() -> None:
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    dp.include_router(router)

    while True:
        try:
            log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
        except (KeyboardInterrupt, SystemExit):
            log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            break
            
        except TelegramRetryAfter as e:
            log.warning("Flood-wait %s —Å–µ–∫—É–Ω–¥.", e.retry_after)
            await asyncio.sleep(e.retry_after)
            
        except Exception:
            log.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(15)

if name == "main":
    asyncio.run(main())
